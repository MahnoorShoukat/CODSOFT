# -*- coding: utf-8 -*-
"""IRIS_FLOWER_CLASSIFICATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B7rmSAVEyePOE3lVGGDZJNg0TrFOG-Vh

**Task 03 : IRIS FLOWER CLASSIFICATION**

Description: I have used the Iris dataset to build a model that can classify iris flowers into different speccies based on their and petal measurements.

**FLOW ANALYSIS:**

* Importing Libraries

* Data loading

* Data Understanding

* Data Visualization

* Data Encoding

* Spliting training and test data

* Model training - KNeighbors Classifier

* Model Evaluation - Prediction
  * Classification Report and Confusion Matrix
"""

from google.colab import drive
drive.mount('/content/drive')

# Importing all the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, classification_report

# Dataset Loading
iris_data = pd.read_csv('/content/drive/MyDrive/CodSoft/IRIS.csv', encoding='latin-1')

"""**Data Understanding**"""

# Displaying the first 5 rows of the dataset
iris_data.head()

# Displaying total rows and columns of the dataset
iris_data.shape

# It will calculate and display count, mean, std, min, max, 25%, 50% and 75% of numeric columns here only "Rating" column.
iris_data.describe()

# Displaying information regarding datatype, null values of every column
iris_data.info()

# Checking for null values
iris_data.isna().sum()

# Displaying the number of samples in each class
iris_data['species'].value_counts()

"""**Data Visualization**"""

# Displaying the Bar plot of species distribution
species_counts = iris_data['species'].value_counts()
plt.figure(figsize=(8, 6))
sns.barplot(x=species_counts.index, y=species_counts.values, palette="Set3")
plt.xlabel('Species')
plt.ylabel('Count')
plt.title('Species Distribution')
plt.show()

# Displaying the Pairplot to visualize relationships between features
sns.pairplot(iris_data, hue='species')
plt.show()

# Correlation matrix
corr_matrix = iris_data.corr()

# Creating a heatmap of the correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)
plt.title('Correlation Heatmap')
plt.show()

# Pairwise scatterplots colored by species
sns.set(style="ticks")
sns.pairplot(iris_data, hue="species", markers=["o", "s", "D"], palette="Set2")
plt.show()

"""**Data Encoding**"""

# Encode the target column 'species'
labelencoder = LabelEncoder()
iris_data['species'] = labelencoder.fit_transform(iris_data['species'])

"""**Model Training**"""

# Splitting into training and testing datasets
X = iris_data.drop('species', axis=1)
y = iris_data['species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Applying MinMax Scaling
scaling = MinMaxScaler()
X_train = scaling.fit_transform(X_train)
X_test = scaling.fit_transform(X_test)

model=KNeighborsClassifier()

model.fit(X_train, y_train)

"""**Model Evaluation**"""

# Predicting on the test set
y_pred = model.predict(X_test)

# Calculating accuracy and its percentage
accuracy = accuracy_score(y_test, y_pred) * 100

# Displaying accuracy in percentage
print(f"Accuracy: {accuracy:.2f}%")

"""**Classification Report**"""

# Displaying classification report
report = classification_report(y_test, y_pred, target_names=labelencoder.classes_)
print(report)

"""**Confusion Matrix**"""

colors = ['#d0bad7', '#c5019c']

cmap = sns.color_palette(colors)

# Displaying a confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix as a heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=labelencoder.classes_, yticklabels=labelencoder.classes_)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()