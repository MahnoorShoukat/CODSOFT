# -*- coding: utf-8 -*-
"""TITANIC SURVIVAL PREDICTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dd4Kx2wdGzB2J2FjEDe3I-9Vj9A4i2EC

**Task 01 : TITANIC SURVIVAL PREDICTION**

Description: I have used the Titanic dataset to build a model that predicts whether a passenger on the Titanic survived or not. The dataset used for this project contains information about individual passengers, such as their age, gender, ticket class, fare, cabin, and whether or not they survived.

**FLOW ANALYSIS:**

* Importing Libraries

* Data loading

* Data Pre-Processing

    *   Replacing missing values
    *   Dropping unnecessary columns
    *   Creating new column (Feature Engineering)
    *   Encoding categorical columns
    *   Scaling numeric columns

* Exploratory Data analysis (EDA)

* Spliting training and test data

* Model training -Logistic Regression

* Model Evaluation - Prediction
"""

from google.colab import drive
drive.mount('/content/drive')

# Importing all the required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder


from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from sklearn.metrics import confusion_matrix, classification_report

# Data Loading
data = pd.read_csv('/content/drive/MyDrive/CodSoft/tested.csv')

# Displaying first 5 rows of the dataset
data.head()

# Displaying information regarding datatype, null values of every column
data.info()

# It will calculate and display count, mean, std, min, max, 25%, 50% and 75% of numeric columns
data.describe()

# Checking for null values
data.isnull().sum()

# Filling null values in Age using mean
mean_age = data['Age'].mean()

data['Age'].fillna(mean_age, inplace=True)

# Filling null values in Fare using mean

mean_fare = data['Fare'].mean()

data['Fare'].fillna(mean_fare, inplace=True)

# Encoding categorical variables
data['Sex'] = data['Sex'].map({'male': 0, 'female': 1})

# Feature engineering - creating a family size column
data['family_size'] = data['SibSp'] + data['Parch']

# Dropping unnecessary columns
data = data.drop(['PassengerId','Name','Cabin','Ticket',], axis =1)

# Creating a LabelEncoder instance
label_encoder = LabelEncoder()

# Encoding the 'embarked' column
data['Embarked'] = label_encoder.fit_transform(data['Embarked'])

"""##**Data Visualization**"""

sns.set_palette("pastel")

# Survival by gender
ax = sns.countplot(data=data, x='Sex', hue='Survived', palette=["#3498db", "#e74c3c"])
plt.xlabel('Gender')
plt.ylabel('Count')
plt.title('Survival by Gender')

# Add counts on top of the bars
for p in ax.patches:
    height = p.get_height()
    ax.text(p.get_x() + p.get_width()/2., height, f'{int(height)}', ha='center', va='bottom')

plt.show()

custom_palette = ['#e74c3c', '#f1c40f', '#3498db']

# Survival Rate by Passenger Class
sns.set_palette(custom_palette)
ax = sns.barplot(data=data, x='Pclass', y='Survived', errorbar=None)

plt.xlabel('Passenger Class')
plt.ylabel('Survival Rate')
plt.title('Survival Rate by Passenger Class')

total_height = sum(data['Survived'])
for p in ax.patches:
    percentage = f"{100 * p.get_height() / total_height:.2f}%"
    x = p.get_x() + p.get_width() / 2
    y = p.get_height()
    ax.text(x, y, percentage, ha='center', va='bottom')

plt.show()

colors = ['#3498db', '#e74c3c']

# Creating the histogram for Survival by Age
plt.hist([data[data['Survived'] == 1]['Age'], data[data['Survived'] == 0]['Age']],
         bins=20, label=['Survived', 'Not Survived'], alpha=0.7, color=colors)

plt.xlabel('Age')
plt.ylabel('Count')
plt.legend()
plt.title('Survival by Age')
plt.show()

embarked_counts = data['Embarked'].value_counts()

colors = ['#34c2db', '#db348a', '#9563a4']

# Creating the barplot
plt.bar(embarked_counts.index, embarked_counts.values, color=colors)

plt.xlabel('Embarkation Port')
plt.ylabel('Count')
plt.title('Passenger Count by Embarkation Port')

for i, count in enumerate(embarked_counts.values):
    plt.text(i, count, str(count), ha='center', va='bottom')

plt.show()

# Histplot for the Distribution of Fare
sns.histplot(data=data, x='Fare', bins=30, kde=True)
plt.xlabel('Fare')
plt.ylabel('Count')
plt.title('Distribution of Fare')
plt.show()

# Barplot for Survival Rate by Family Size
sns.barplot(data=data, x='family_size', y='Survived', ci=None)
plt.xlabel('Family Size')
plt.ylabel('Survival Rate')
plt.title('Survival Rate by Family Size')
plt.xticks(rotation=90)
plt.show()

# As we have created a new column "Family Size". So, will drop the previous one's.
data.drop(columns=['SibSp', 'Parch', 'Embarked'], inplace=True)

data.head()

# Now, Data is cleaned
data.isnull().sum()

# Data Splitting
X = data.drop(["Survived"] , axis = 1)
y = data['Survived']  # Target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Applying MinMax Scaling
scaling = MinMaxScaler()
X_train = scaling.fit_transform(X_train)
X_test = scaling.fit_transform(X_test)

# Create and train a logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Calculating accuracy and its percentage
accuracy = accuracy_score(y_test, y_pred) * 100

# Generating the classification report
report = classification_report(y_test, y_pred)

# Displaying accuracy in percentage
print(f"Accuracy: {accuracy:.2f}%")
print(report)

# Plotting the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

colors = ['#d0bad7', '#c5019c']

cmap = sns.color_palette(colors)

plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap=cmap, cbar=False,
            xticklabels=['Not Survived', 'Survived'], yticklabels=['Not Survived', 'Survived'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()