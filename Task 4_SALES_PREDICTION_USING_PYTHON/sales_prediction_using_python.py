# -*- coding: utf-8 -*-
"""SALES_PREDICTION_USING_PYTHON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lPiQyWdD-mEKwOEiNYemHng2RqvZ1u0S

**Task 04 : SALES PREDICTION USING PYTHON**

Description: I have used the sales prediction dataset to build a model for Sales prediction as it involves forcasting the amount of a product that customers will purchase, taking into account vairous factors such as advertising platform selection.

**FLOW ANALYSIS:**

* Importing Libraries

* Data loading

* Data Understanding

* Data Visualization

* Spliting training and test data

* Scaling

* Model training -Linear Regression

* Model Evaluation - Prediction
"""

from google.colab import drive
drive.mount('/content/drive')

# Importing all the required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, classification_report

# Data Loading
sales_data = pd.read_csv('/content/drive/MyDrive/CodSoft/advertising.csv')

# Displaying first 5 rows of the dataset
sales_data.head()

sales_data.shape

# Displaying information regarding datatype, null values of every column
sales_data.info()

# It will calculate and display count, mean, std, min, max, 25%, 50% and 75% of numeric columns
sales_data.describe()

# Checking for null values
sales_data.isnull().sum()

# Pairplot to visualize relationships between features
sns.pairplot(sales_data)
plt.show()

# Heatmap
correlation_matrix = sales_data.corr()
sns.heatmap(correlation_matrix, annot=True)
plt.show()

X=sales_data.drop(columns=['Sales'],axis=1)
Y=sales_data['Sales']

print(X)

print(Y)

print(X.shape,Y.shape)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""**Data Splitting**"""

X_train, X_test, y_train, y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

# Model Training
model=LinearRegression()
model.fit(X_train,y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate Mean Squared Error (MSE) and R-squared (R2) score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

Prediction_model = [[100, 100, 100]]
predicted_sales = model.predict(Prediction_model)

print('Models Predicted Sales of TV, Radio, and Newspaper:', predicted_sales)